# OPTIMIZED Docker Compose configuration for LEGO Purchase Suggestion System
# Enhanced for ultra-fast startup and better performance
version: '3.8'

services:
  # Redis Cache - Optimized for fast startup
  redis:
    image: redis:7-alpine
    container_name: lego-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --tcp-keepalive 60
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - lego-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s

  # PostgreSQL Database - Optimized for fast startup
  database:
    image: postgres:15-alpine
    container_name: lego-database
    environment:
      POSTGRES_DB: lego_purchase_system
      POSTGRES_USER: lego_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Performance optimizations for faster startup
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      # Fast startup optimizations
      POSTGRES_FSYNC: "off"
      POSTGRES_SYNCHRONOUS_COMMIT: "off"
      POSTGRES_WAL_LEVEL: "minimal"
      POSTGRES_MAX_WAL_SENDERS: 0
      POSTGRES_MAX_REPLICATION_SLOTS: 0
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./lego_database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backend/migrations/run_performance_optimizations.sql:/docker-entrypoint-initdb.d/02-optimizations.sql:ro
    ports:
      - "5432:5432"
    networks:
      - lego-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lego_user -d lego_purchase_system"]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 10s

  # Backend API - Optimized for fast startup
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      # Enable build cache for faster rebuilds
      cache_from:
        - lego-backend:latest
    container_name: lego-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://lego_user:${POSTGRES_PASSWORD}@database:5432/lego_purchase_system
      # Database connection variables for User.js model
      POSTGRES_HOST: database
      POSTGRES_USER: lego_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: lego_purchase_system
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      FRONTEND_URL: http://localhost:5500
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      # Performance optimizations for faster startup
      NODE_OPTIONS: "--max-old-space-size=512 --optimize-for-size"
      UV_THREADPOOL_SIZE: 4
      # Fast startup optimizations
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - lego-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Frontend - Optimized for fast startup
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Enable build cache for faster rebuilds
      cache_from:
        - lego-frontend:latest
    container_name: lego-frontend
    ports:
      - "5500:80"
    networks:
      - lego-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  # TablePlus Database Management (Optional) - Optimized
  tableplus:
    image: postgres:15-alpine
    container_name: lego-tableplus
    environment:
      POSTGRES_DB: lego_purchase_system
      POSTGRES_USER: lego_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    networks:
      - lego-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'TablePlus connection details:'
        echo 'Host: localhost'
        echo 'Port: 5433'
        echo 'User: lego_user'
        echo 'Password: Use POSTGRES_PASSWORD from .env file'
        echo 'Database: lego_purchase_system'
        echo ''
        echo 'Waiting for database to be ready...'
        until pg_isready -h database -p 5432 -U lego_user; do
          echo 'Waiting for database...'
          sleep 1
        done
        echo 'Database is ready!'
        tail -f /dev/null
      "
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lego-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: lego-bridge

