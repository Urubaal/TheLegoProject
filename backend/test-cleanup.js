#!/usr/bin/env node

/**
 * Skrypt testowy do demonstracji automatycznego czyszczenia log√≥w
 * 
 * U≈ºycie:
 * node test-cleanup.js
 */

const fs = require('fs');
const path = require('path');
const { systemMonitor, logCleanupScheduler } = require('./utils/monitoring');

console.log('üßπ Test automatycznego czyszczenia log√≥w\n');

// Utw√≥rz katalog logs je≈õli nie istnieje
const logsDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
  console.log('‚úÖ Utworzono katalog logs/');
}

// Utw√≥rz testowe pliki log√≥w z r√≥≈ºnymi datami
const testFiles = [
  { name: 'application-2024-01-01.log', age: 30 }, // 30 dni temu
  { name: 'application-2024-01-10.log', age: 20 }, // 20 dni temu
  { name: 'application-2024-01-20.log', age: 10 }, // 10 dni temu
  { name: 'application-2024-01-25.log', age: 5 },  // 5 dni temu
  { name: 'application-2024-01-28.log', age: 2 },  // 2 dni temu
  { name: 'application-2024-01-29.log', age: 1 },  // 1 dzie≈Ñ temu
  { name: 'application-2024-01-30.log', age: 0 },  // dzisiaj
];

console.log('üìÅ Tworzenie testowych plik√≥w log√≥w...');
testFiles.forEach(file => {
  const filePath = path.join(logsDir, file.name);
  const content = `Test log file created ${file.age} days ago\nTimestamp: ${new Date(Date.now() - file.age * 24 * 60 * 60 * 1000).toISOString()}\n`;
  
  fs.writeFileSync(filePath, content);
  
  // Ustaw datƒô modyfikacji na odpowiedni dzie≈Ñ
  const fileDate = new Date(Date.now() - file.age * 24 * 60 * 60 * 1000);
  fs.utimesSync(filePath, fileDate, fileDate);
  
  console.log(`  ‚úÖ ${file.name} (${file.age} dni temu)`);
});

console.log('\nüìä Stan przed czyszczeniem:');
const beforeCleanup = systemMonitor.checkLogFileSizes();
console.log(`  Pliki: ${beforeCleanup.totalFiles}`);
console.log(`  Rozmiar: ${beforeCleanup.totalSize}KB`);

console.log('\nüßπ Wykonywanie czyszczenia...');
const cleanupResult = systemMonitor.cleanupOldLogs();

console.log('\nüìä Wyniki czyszczenia:');
console.log(`  ‚úÖ Usuniƒôto: ${cleanupResult.deletedFiles} plik√≥w`);
console.log(`  üìÅ Pozosta≈Ço: ${cleanupResult.remainingFiles} plik√≥w`);

if (cleanupResult.deletedFilesList && cleanupResult.deletedFilesList.length > 0) {
  console.log('\nüóëÔ∏è  Usuniƒôte pliki:');
  cleanupResult.deletedFilesList.forEach(file => {
    console.log(`  - ${file.file} (${file.age} dni, ${file.size}KB)`);
  });
}

console.log('\nüìä Stan po czyszczeniu:');
const afterCleanup = systemMonitor.checkLogFileSizes();
console.log(`  Pliki: ${afterCleanup.totalFiles}`);
console.log(`  Rozmiar: ${afterCleanup.totalSize}KB`);

console.log('\nüïê Test harmonogramu...');
console.log('Status harmonogramu:', logCleanupScheduler.getStatus());

console.log('\n‚úÖ Test zako≈Ñczony pomy≈õlnie!');
console.log('\nüí° Aby przetestowaƒá harmonogram w czasie rzeczywistym:');
console.log('   1. Uruchom serwer: node server.js');
console.log('   2. Sprawd≈∫ status: curl -X POST http://localhost:3000/api/admin/scheduler -H "Content-Type: application/json" -d \'{"action": "status"}\'');
console.log('   3. Wykonaj czyszczenie: curl -X POST http://localhost:3000/api/admin/scheduler -H "Content-Type: application/json" -d \'{"action": "cleanup"}\'');
