# Cursor AI Rules for LEGO Purchase System

## Project Context
This is a FULLY FUNCTIONAL LEGO purchase suggestion system with:
- **Backend**: Node.js/Express API with PostgreSQL + Redis
- **Frontend**: Vanilla HTML/CSS/JS (responsive)
- **Database**: PostgreSQL with 1000+ LEGO sets, user collections, OLX offers
- **Cache**: Redis for sessions, tokens, and performance
- **Auth**: JWT + email verification + password reset
- **Security**: Helmet, CORS, rate limiting, input validation
- **Monitoring**: Structured logging, health checks, metrics
- **Deployment**: Docker Compose (dev & prod)

## Key Files to Check
- `PROJECT_STATUS.md` - Complete implementation status
- `QUICK_START.md` - Immediate setup and features overview
- `CHANGELOG.md` - Recent changes and updates
- `backend/server.js` - Main server with all middleware
- `backend/models/` - Database models (User, LegoSet, UserCollection, OlxOffer)
- `backend/utils/` - Services (redisService, emailService, logger, monitoring)
- `docker-compose.yml` - Development environment
- `env.example` - Required environment variables

## Database Schema
- `users` - User accounts with JWT auth
- `user_sessions` - Secure session storage (httpOnly cookies)
- `lego_sets` - 1000+ LEGO sets catalog
- `user_collections` - User owned/wanted collections
- `olx_offers` - Marketplace offers
- `system_logs` - Application logs

## Important Notes
- PostgreSQL is PRIMARY database (not MongoDB)
- Redis is REQUIRED (system won't start without it)
- Sessions stored in PostgreSQL + httpOnly cookies (NOT localStorage)
- CSRF Protection active (csurf library)
- Email verification required before login (is_active check)
- Password requirements: 10+ chars, special chars, blacklist validation
- Query timeouts: 10s per query, 30s per statement
- Session cleanup: Automatic every 24 hours
- Email service uses SMTP (Nodemailer)
- All models have connection pool error handling
- Environment variables validation on startup
- Structured logging with Winston (NO console.log)
- Rate limiting and security middleware active
- Error handling enhanced with PostgreSQL-specific codes

## When Making Changes
1. Check `PROJECT_STATUS.md` first
2. Verify database schema in `lego_database_schema.sql`
3. Check existing models before adding new fields
4. Follow `DEVELOPMENT_RULES.md` for database changes
5. Test with Docker Compose setup
6. Run `node update-docs.js` to update documentation

## Common Commands
```bash
# Start development
docker-compose up -d

# Check logs
docker-compose logs -f backend

# Database access
docker exec -it lego_db psql -U lego_user -d lego_purchase_system

# Redis access  
docker exec -it lego_redis redis-cli

# Update documentation
node update-docs.js
```

## Never Assume
- ‚ùå Don't assume MongoDB (it's PostgreSQL)
- ‚ùå Don't assume Redis is optional (Redis IS REQUIRED)
- ‚ùå Don't assume localStorage for tokens (use httpOnly cookies)
- ‚ùå Don't assume no CSRF protection (csurf is active)
- ‚ùå Don't assume weak passwords (10+ chars + validation)
- ‚ùå Don't assume no auth (JWT + Session middleware is active)
- ‚ùå Don't assume no logging (structured logging is everywhere)
- ‚ùå Don't assume no security (Helmet, CORS, rate limiting active)
- ‚ùå Don't assume no error handling (PostgreSQL errors are handled)
- ‚ùå Don't assume console.log is OK (use logger.info/error/debug)

## Always Check
- ‚úÖ Check `PROJECT_STATUS.md` for current features
- ‚úÖ Check `QUICK_START.md` for setup
- ‚úÖ Check `CHANGELOG.md` for recent changes
- ‚úÖ Check existing models before database changes
- ‚úÖ Check Docker setup before deployment changes
- ‚úÖ Check environment variables in `env.example`
- ‚úÖ Run documentation update after changes

## Security Features (v2.1) - IMPLEMENTED ‚úÖ
- ‚úÖ httpOnly Cookies (XSS protection - NO localStorage)
- ‚úÖ SameSite=Strict cookies (CSRF protection - modern approach)
- ‚úÖ Sessions in PostgreSQL (user_sessions table)
- ‚úÖ Email verification before login (is_active check)
- ‚úÖ Strong password validation (10+ chars, special chars, blacklist of 30+)
- ‚úÖ Rate limiting (50/15min global, 3/hour password reset per email)
- ‚úÖ Session management API (/api/sessions endpoints)
- ‚úÖ Automatic session cleanup (cronjob every 24h)
- ‚úÖ Query timeouts (10s query, 30s statement)
- ‚úÖ Structured logging (Winston - NO console.log in production)
- ‚úÖ Password Strength Meter (frontend real-time feedback)
- ‚úÖ cookie-parser middleware

## API Endpoints
**Authentication:**
- `POST /api/auth/register` - Create account (sets httpOnly cookie)
- `POST /api/auth/login` - Login (sets httpOnly cookie)
- `POST /api/auth/logout` - Logout (invalidates session + clears cookie)
- `POST /api/auth/forgot-password` - Request password reset (3/hour limit)
- `POST /api/auth/reset-password` - Reset password (3/hour limit)
- `GET /api/auth/profile` - Get current user (requires session cookie)

**Session Management:**
- `GET /api/sessions` - Get all active user sessions
- `DELETE /api/sessions/:id` - Invalidate specific session
- `POST /api/sessions/invalidate-all-others` - Logout from all other devices

**System:**
- `GET /api/csrf-info` - CSRF protection information
- `GET /api/health` - Health check
- `GET /api/metrics` - System metrics

**Profile:**
- `GET /api/profile` - Get user profile
- `PUT /api/profile` - Update profile

**LEGO:**
- `GET /api/lego/sets` - Get LEGO sets
- `GET /api/lego/collection` - Get user collection

## Recent Implementations (v2.1 - 2025-09-30)
‚úÖ httpOnly Cookies instead of localStorage
‚úÖ Sessions in PostgreSQL (user_sessions table)
‚úÖ SameSite=Strict for CSRF protection
‚úÖ Email verification before login
‚úÖ Password validation (10+ chars, special, blacklist)
‚úÖ Session Management API (GET/DELETE)
‚úÖ Automatic session cleanup (24h cronjob)
‚úÖ Password Strength Meter (frontend)
‚úÖ Query timeouts (security)
‚úÖ Rate limiting on password reset (3/hour)
‚úÖ Dynamic API URL (dev/prod)
‚úÖ Structured logging (no console.log)

## Files to Know (New in v2.1)
- `backend/models/Session.js` - Session management
- `backend/services/sessionCleanupService.js` - Auto cleanup
- `backend/controllers/sessionController.js` - Session API
- `backend/routes/sessions.js` - Session routes
- `frontend/config.js` - Dynamic API URL
- `frontend/password-strength.js` - Password meter
- `SECURITY_AUDIT_REPORT.md` - Security audit
- `FINAL_SECURITY_UPDATE.md` - Implementation summary

## Breaking Changes in v2.1
‚ö†Ô∏è Sessions migrated from localStorage to httpOnly cookies
‚ö†Ô∏è All fetch() calls must include credentials: 'include'
‚ö†Ô∏è Password requirements changed (10+ chars mandatory)
‚ö†Ô∏è Email verification required before login

---
**Last Updated**: 2025-09-30
**Version**: 2.1.0 (Security Enhanced)
**Security Level**: üü¢ HIGH (8.5/10)
**Branch**: feature/security-enhanced-v2.1
